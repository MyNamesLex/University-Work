//instructions on how to run in ShaderToy
//copy and paste all of this code into the Image textbox
//and run the code

//noise functions from online

const int shuffle[256] = int[256]
(206,21,27,124,238,156,174,113,170,81,237,12,22,241,23,141,10,167,146,114,
 162,9,13,5,139,216,91,65,6,189,221,86,7,187,212,166,67,149,131,98,126,1,
 137,54,8,70,110,148,46,151,106,89,121,236,101,227,49,72,255,239,3,73,244,169,
 157,96,175,75,77,205,160,30,36,178,112,88,154,228,104,68,185,43,184,182,14,163,
 233,18,180,45,83,186,59,25,129,111,74,215,122,218,144,44,100,161,53,254,55,92,
 35,145,220,119,195,66,130,150,140,181,57,56,84,207,245,231,191,248,61,52,118,168,
 226,223,40,197,116,58,232,243,214,204,33,28,105,202,24,152,133,51,196,210,115,
 190,97,147,143,132,50,94,165,109,198,39,134,120,2,85,128,135,20,79,123,90,222,
 26,155,82,252,136,76,217,32,240,63,38,159,247,37,176,78,234,42,219,209,0,103,
 64,99,15,95,242,47,11,246,211,199,17,62,29,192,69,183,200,34,225,138,224,127,
 235,229,117,253,71,108,87,201,208,171,203,41,173,102,125,213,107,179,250,80,16,
 4,153,142,251,31,172,164,188,249,93,60,230,194,177,193,48,158,19);    

const vec3 gradients[16] = vec3[16](
vec3(1,1,0),vec3(-1,1,0),vec3(1,-1,0),vec3(-1,-1,0),
vec3(1,0,1),vec3(-1,0,1),vec3(1,0,-1),vec3(-1,0,-1),
vec3(0,1,1),vec3(0,-1,1),vec3(0,1,-1),vec3(0,-1,-1),
vec3(1,1,0),vec3(-1,1,0),vec3(0,-1,1),vec3(0,-1,-1));

int Hash( in int i, in int j, in int k )
{
    return shuffle[(shuffle[(shuffle[i%256] + j)%256] + k)%256]%16;
}

vec3 Gradient( int i, int j, int k )
{
    return gradients[Hash(i,j,k)];
}

vec3 PositionVector( int i, int j, int k, vec3 pos )
{
    return (pos-vec3(i,j,k));
}

float Smoothstep( float f0, float f1, float x )
{
    x = max(x, 0.0);
    x = min(x, 1.0);
    x = 3.0*x*x - 2.0*x*x*x;
    return f0*(1.0f-x) + f1*x;
}


float PerlinNoise( vec3 pos, float iScale )
{
    float noiseVals[8];
    pos = (pos + vec3(100,100,100))*iScale; // offset of 100 is to make sure it is in the positive quadrant
    // get the indices of the cube this vert is in
    int i = int( pos.x );
    int j = int( pos.y );
    int k = int( pos.z );
    // get the noise values at the vertices of the cube
    noiseVals[0] = dot( Gradient(i,j,k),       PositionVector(i,j,k,pos) );
    noiseVals[1] = dot( Gradient(i+1,j,k),     PositionVector(i+1,j,k,pos) );
    noiseVals[2] = dot( Gradient(i+1,j,k+1),   PositionVector(i+1,j,k+1,pos) );
    noiseVals[3] = dot( Gradient(i,j,k+1),     PositionVector(i,j,k+1,pos) );
    noiseVals[4] = dot( Gradient(i,j+1,k),     PositionVector(i,j+1,k,pos) );
    noiseVals[5] = dot( Gradient(i+1,j+1,k),   PositionVector(i+1,j+1,k,pos) );
    noiseVals[6] = dot( Gradient(i+1,j+1,k+1), PositionVector(i+1,j+1,k+1,pos) );
    noiseVals[7] = dot( Gradient(i,j+1,k+1),   PositionVector(i,j+1,k+1,pos) );
    // now do the interpolation

    // interpolation parameters tx, ty, tz
    vec3 t = pos - vec3(i,j,k);

    float ft, fb;
    float fy0, fy1;
    // bottom xz plane
    ft = Smoothstep( noiseVals[3], noiseVals[2], t.x);
    fb = Smoothstep( noiseVals[0], noiseVals[1], t.x);
    fy0 = Smoothstep( fb, ft, t.z); 
    // top xz plane
    ft = Smoothstep( noiseVals[7], noiseVals[6], t.x);
    fb = Smoothstep( noiseVals[4], noiseVals[5], t.x);
    fy1 = Smoothstep( fb, ft, t.z); 
    // y interpolation
    return Smoothstep(fy0, fy1, t.y);
}

float ScaledNoise( vec3 pos, float iScale )
{
    return (1.0f + PerlinNoise( pos, iScale))*0.5f;
}

float FractalNoise( vec3 pos, float iScale, float mult, int numOctaves)
{
    float fac = 1.0f;
    float noise = ScaledNoise(pos, iScale);
    for ( int i = 0; i < numOctaves-1; i++ )
    {
        fac *= mult;
        iScale *= 2.0;
        noise += fac*ScaledNoise(pos, iScale);
    }
    return noise;
}

//output

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

    //screen variables
    float Timer = iTime; // time running
    vec2 uv = fragCoord/iResolution.xy; // normalized pixel coords from 0 to 1, from ShaderToy starter code
    vec2 centre = vec2( 0.5*iResolution.x/iResolution.y,0.5); // centre of screen
    vec3 col = 1.0 + 1.0 *cos(Timer +uv.xyx+vec3(1,6,1)); // Time varying pixel color, modified from ShaderToy starter code
    
    // mouse variables
    vec4 mousePos = iMouse; // mouse vec4
    bool isMouseDown = mousePos.z > 0.0; // is mouse is held?
    float distancetomouse = distance(fragCoord.xy, mousePos.xy); // distance to mouse
    
    //noise variables
    float noise = FractalNoise( vec3(uv,iTime), 1.0, 0.5, 5 ) *0.5; // noise function (from moodle)
    
    //base output, changes over time, multiplying by the noise float to add the smoke like effect
    fragColor = vec4(col,1.0f) * noise;
    
    if(isMouseDown == true) // if mouse is held
    {
        float gradVal;
        float gradValTwo; 
        
        // including the vertical lightning aswell as horizontal lightning
        // makes it look weird when on the same screen together
        
        float samplePoint = uv.y; // vertical
        float samplePointTwo = uv.x; // horizontal
        
        //y alignment

        samplePoint += -0.5 + noise;
        samplePointTwo += 0.5 + noise;
        
        //thickness of the bolt
        gradVal = 0.94f - abs(samplePoint-centre.y);
        gradValTwo = 0.2f - abs(samplePointTwo-centre.y);
           
        //scaling down the thickness of the bolt
        gradVal *= gradVal; 
        gradVal *= gradVal;
        gradVal *= gradVal;
        gradVal *= gradVal;
        gradVal *= gradVal;
        
        gradValTwo *= gradValTwo;
        gradValTwo *= gradValTwo;
        gradValTwo *= gradValTwo;
        gradValTwo *= gradValTwo;
        gradValTwo *= gradValTwo;
        
        
        //distance to mouse is included to have the lightning form be impacted
        //by the mouse input and the lightning will lean towards the mouse
        //if the mouse is near to the edge of the lightning

        //fragcolor vec4 * values are (red, green, blue)

        if(Timer >= 30.0) // add variety and introduce the vertical lightning after 30 seconds of runtime
        {
            fragColor = vec4(gradValTwo*2.0, gradValTwo*2.0, gradValTwo*4.0, 1.0f ) * distancetomouse;
        }
        else
        {
            fragColor = vec4(gradVal*4.0, gradVal*2.0, gradVal*4.0, 1.0f ) * distancetomouse;
        }
    }
}